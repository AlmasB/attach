apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

task nativeLib (dependsOn: classes) {
    if (project.hasProperty('os')) {
        def osname = project.os
        def service = getServiceName(project.name)

        doFirst {
            nativeBuild("$project.buildDir", "$project.projectDir", "$service", "$osname");
        }
    }
}

task nativeJar(type: Jar, dependsOn: nativeLib) {
    from sourceSets.main.output

    if (project.hasProperty('os')) {
        def osname = project.os
        def service = getServiceName(project.name)

        archiveBaseName = project.name
        if (osname == 'mac' || osname == 'linux' || osname == 'win' || osname == 'desktop') {
            archiveClassifier = 'desktop'
            exclude '**/*/impl/Dummy**', "**/impl/IOS**"
        } else {
            archiveClassifier = osname
            exclude '**/*/impl/Dummy**', "**/impl/Desktop**"
        }
        File n = new File("$project.buildDir/native/${osname}")
        if (n.exists()) {
            println "Adding lib${service} to native jar"
            from(n.listFiles().find { it.name.startsWith("lib${service}") }) {
                into "native"
            }
        } else {
            println "lib${service} not added to native jar"
        }
    } else {
        exclude "**/impl/Desktop**", "**/impl/IOS**"
    }
}

private String getServiceName(projectName) {
    if (projectName.contains("-")) { // in-app-billing -> InAppBilling
        def values = projectName.tokenize("-")
        return values.inject("") { name, pn -> name + pn.capitalize()  }
    } else if (projectName == "util") {
        projectName = "attach"
    }
    return projectName.capitalize()
}

publishing {
    publications {
        maven(MavenPublication) {
//            from components.java
            artifact nativeJar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Gluon Attach (${project.name})"
                description = "API for accessing ${project.name} features"
                url = 'https://gluonhq.com/products/mobile/'

                developers {
                    developer {
                        name = 'Johan Vos'
                        email = 'johan.vos@gluonhq.com'
                        organization = 'Gluon'
                        organizationUrl = 'https://gluonhq.com'
                    }
                    developer {
                        name = 'Joeri Sykora'
                        email = 'joeri.sykora@gluonhq.com'
                        organization = 'Gluon'
                        organizationUrl = 'https://gluonhq.com'
                    }
                    developer {
                        name = 'Erwin Morrhey'
                        email = 'erwin.morrhey@gluonhq.com'
                        organization = 'Gluon'
                        organizationUrl = 'https://gluonhq.com'
                    }
                }

                licenses {
                    license {
                        name = 'The GNU General Public License'
                        url = 'https://opensource.org/licenses/GPL-3.0'
                        distribution = 'repo'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/tiainen/attach.git'
                    developerConnection = 'scm:git:ssh://git@github.com/tiainen/attach.git'
                    url = 'https://github.com/tiainen/attach'
                }
            }

            pom.withXml {
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.groupId.text() == 'org.openjfx'
                }.each {
                    it.remove(it.classifier)
                }
            }
        }
    }

    repositories {
        maven {
            // to upload release, use:
            // ./gradlew -PrepositoryUrl=https://oss.sonatype.org/service/local/staging/deploy/maven2 publish
//            url = getStringProperty('repositoryUrl', 'https://oss.sonatype.org/content/repositories/snapshots/')
            url = getStringProperty('repositoryUrl', 'https://nexus.gluonhq.com/nexus/content/repositories/public-snapshots/')
            credentials {
                username = getStringPropertyDefaultAsProperty('repositoryUsername', 'gluonNexusUsername')
                password = getStringPropertyDefaultAsProperty('repositoryPassword', 'gluonNexusPassword')
            }
        }
    }
}

signing {
    sign publishing.publications.maven
    required = { gradle.taskGraph.hasTask(publish) && !version.endsWith("SNAPSHOT") }
}

private String getStringProperty(String name, String defaultValue) {
    if (!project.hasProperty(name)) {
        return defaultValue
    }

    def propertyValue = project.property(name)
    return propertyValue != null ? propertyValue.toString().trim() : defaultValue
}

private String getStringPropertyDefaultAsProperty(String name, String defaultProperty) {
    if (!project.hasProperty(name)) {
        return project.hasProperty(defaultProperty) ? project.property(defaultProperty) : System.getenv(name)
    }

    def propertyValue = project.property(name)
    if (propertyValue != null) {
        return propertyValue.toString().trim()
    } else {
        return project.hasProperty(defaultProperty) ? project.property(defaultProperty) : System.getenv(name)
    }
}
